openapi: 3.0.0
info:
  title: Restaurants API
  description: "During project week, we learn to Build an API with restaurants. This\
    \ is a documentation for this API, proudly created with Bump.\n\U0001f682    \
    \ Enjoy     \U0001f680\n"
  license:
    name: MIT
  version: "3.3"
servers:
- url: https://virtserver.swaggerhub.com/Paul_M2B/zeit/3.3
  description: SwaggerHub API Auto Mocking
- url: http://localhost:3000/api/v1
paths:
  /restaurants:
    get:
      summary: List all restaurants
      responses:
        "200":
          description: Array of restaurants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurants'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a restaurant
      parameters:
      - name: X-User-email
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: polo@bump.sh
      - name: X-User-Token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: oRWFjCmuzP-cUeshuZpq
      requestBody:
        description: New Restaurant information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurant'
        required: true
      responses:
        "201":
          description: Restaurant created
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /restaurants/{restaurantId}:
    get:
      summary: Info for a specific restaurant
      parameters:
      - name: restaurantId
        in: path
        description: The id of the restaurant to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantWithComment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Destroy specific restaurant
      parameters:
      - name: restaurantId
        in: path
        description: The id of the restaurant to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-User-email
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: polo@bump.sh
      - name: X-User-Token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: oRWFjCmuzP-cUeshuZpq
      responses:
        "204":
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update specific restaurant
      parameters:
      - name: restaurantId
        in: path
        description: The id of the restaurant to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: X-User-email
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: polo@bump.sh
      - name: X-User-Token
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: oRWFjCmuzP-cUeshuZpq
      requestBody:
        description: Restaurant update information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRestaurant'
        required: true
      responses:
        "200":
          description: Expected response with updated restaurant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantWithComment'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Comment:
      required:
      - content
      - id
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
          example: Don't forget your Broche before livecode
    NewRestaurant:
      required:
      - address
      - name
      type: object
      properties:
        name:
          type: string
          example: This is a new restaurant example
        address:
          type: string
          example: On a new place
    Restaurant:
      required:
      - address
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: La Broche
        address:
          type: string
          example: "14 Rue Romarin, 69001 Lyon"
    RestaurantWithComment:
      required:
      - address
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: La Broche
        address:
          type: string
          example: rue du plat
        comment:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    Restaurants:
      type: array
      items:
        $ref: '#/components/schemas/Restaurant'
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
